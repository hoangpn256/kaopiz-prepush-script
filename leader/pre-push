#!/bin/bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"
customer="e-reverse"
develop_branch="enhance"
branch="$(git rev-parse --abbrev-ref HEAD)"
read -a prefix_branch<<<${branch//"/"/ }

echo "------------------------------"
echo "Prepush is checking ... in $url"
echo $branch

while read local_ref local_oid remote_ref remote_oid
do
    if [[ ${local_ref#refs/heads/} != $branch | ${remote_ref#refs/heads/} != $branch ]]; then
        echo -e "Can't push to branch difference current_branch: ${branch}. Please change branch will be push into current_branch."
        echo "------------------------------"
        exit 1 
    fi
    if [[ ${prefix_branch} =~ $develop_branch ]]; then
        echo -e "Can't push to branch develop ${branch} of customer."
        echo "------------------------------"
        exit 1
    fi
done
echo "------------------------------"
exit 0
